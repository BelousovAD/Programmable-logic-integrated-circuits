// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/17/2022 01:16:02"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          PR7
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PR7_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [3:0] imp_width;
reg reset;
// wires                                               
wire pwm_out;

// assign statements (if any)                          
PR7 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.imp_width(imp_width),
	.pwm_out(pwm_out),
	.reset(reset)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #1000 1'b1;
	#1000;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #540000 1'b1;
	reset = #110000 1'b0;
end 
// imp_width[ 3 ]
initial
begin
	imp_width[3] = 1'b1;
	imp_width[3] = #400000 1'b0;
end 
// imp_width[ 2 ]
initial
begin
	imp_width[2] = 1'b1;
	imp_width[2] = #720000 1'b0;
end 
// imp_width[ 1 ]
initial
begin
	imp_width[1] = 1'b0;
end 
// imp_width[ 0 ]
initial
begin
	imp_width[0] = 1'b1;
end 
endmodule

