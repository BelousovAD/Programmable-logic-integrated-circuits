// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 18.0.0 Build 614 04/24/2018 SJ Standard Edition"

// DATE "10/08/2022 03:20:18"

// 
// Device: Altera EP4CE115F29C7 Package FBGA780
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module PR42 (
	in,
	out);
input 	[7:0] in;
output 	[5:0] out;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \out[0]~output_o ;
wire \out[1]~output_o ;
wire \out[2]~output_o ;
wire \out[3]~output_o ;
wire \out[4]~output_o ;
wire \out[5]~output_o ;
wire \in[0]~input_o ;
wire \in[3]~input_o ;
wire \in[1]~input_o ;
wire \in[2]~input_o ;
wire \in[4]~input_o ;
wire \out~0_combout ;
wire \in[6]~input_o ;
wire \in[7]~input_o ;
wire \in[5]~input_o ;
wire \out~1_combout ;
wire \out~2_combout ;
wire \out~3_combout ;
wire \out~4_combout ;
wire \out~5_combout ;


cycloneive_io_obuf \out[0]~output (
	.i(\out~2_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \out[0]~output .bus_hold = "false";
defparam \out[0]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \out[1]~output (
	.i(\out~3_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \out[1]~output .bus_hold = "false";
defparam \out[1]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \out[2]~output (
	.i(\out~4_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \out[2]~output .bus_hold = "false";
defparam \out[2]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \out[3]~output (
	.i(\out~5_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \out[3]~output .bus_hold = "false";
defparam \out[3]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \out[4]~output (
	.i(gnd),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out[4]~output_o ),
	.obar());
// synopsys translate_off
defparam \out[4]~output .bus_hold = "false";
defparam \out[4]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \out[5]~output (
	.i(gnd),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out[5]~output_o ),
	.obar());
// synopsys translate_off
defparam \out[5]~output .bus_hold = "false";
defparam \out[5]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \in[0]~input (
	.i(in[0]),
	.ibar(gnd),
	.o(\in[0]~input_o ));
// synopsys translate_off
defparam \in[0]~input .bus_hold = "false";
defparam \in[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \in[3]~input (
	.i(in[3]),
	.ibar(gnd),
	.o(\in[3]~input_o ));
// synopsys translate_off
defparam \in[3]~input .bus_hold = "false";
defparam \in[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \in[1]~input (
	.i(in[1]),
	.ibar(gnd),
	.o(\in[1]~input_o ));
// synopsys translate_off
defparam \in[1]~input .bus_hold = "false";
defparam \in[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \in[2]~input (
	.i(in[2]),
	.ibar(gnd),
	.o(\in[2]~input_o ));
// synopsys translate_off
defparam \in[2]~input .bus_hold = "false";
defparam \in[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \in[4]~input (
	.i(in[4]),
	.ibar(gnd),
	.o(\in[4]~input_o ));
// synopsys translate_off
defparam \in[4]~input .bus_hold = "false";
defparam \in[4]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \out~0 (
// Equation(s):
// \out~0_combout  = ((\in[3]~input_o  & ((\in[1]~input_o ) # (\in[2]~input_o )))) # (!\in[4]~input_o )

	.dataa(\in[3]~input_o ),
	.datab(\in[1]~input_o ),
	.datac(\in[2]~input_o ),
	.datad(\in[4]~input_o ),
	.cin(gnd),
	.combout(\out~0_combout ),
	.cout());
// synopsys translate_off
defparam \out~0 .lut_mask = 16'hA8FF;
defparam \out~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \in[6]~input (
	.i(in[6]),
	.ibar(gnd),
	.o(\in[6]~input_o ));
// synopsys translate_off
defparam \in[6]~input .bus_hold = "false";
defparam \in[6]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \in[7]~input (
	.i(in[7]),
	.ibar(gnd),
	.o(\in[7]~input_o ));
// synopsys translate_off
defparam \in[7]~input .bus_hold = "false";
defparam \in[7]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \in[5]~input (
	.i(in[5]),
	.ibar(gnd),
	.o(\in[5]~input_o ));
// synopsys translate_off
defparam \in[5]~input .bus_hold = "false";
defparam \in[5]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \out~1 (
// Equation(s):
// \out~1_combout  = (\out~0_combout ) # ((\in[6]~input_o ) # ((\in[7]~input_o ) # (!\in[5]~input_o )))

	.dataa(\out~0_combout ),
	.datab(\in[6]~input_o ),
	.datac(\in[7]~input_o ),
	.datad(\in[5]~input_o ),
	.cin(gnd),
	.combout(\out~1_combout ),
	.cout());
// synopsys translate_off
defparam \out~1 .lut_mask = 16'hFEFF;
defparam \out~1 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \out~2 (
// Equation(s):
// \out~2_combout  = (\in[0]~input_o  & !\out~1_combout )

	.dataa(\in[0]~input_o ),
	.datab(gnd),
	.datac(gnd),
	.datad(\out~1_combout ),
	.cin(gnd),
	.combout(\out~2_combout ),
	.cout());
// synopsys translate_off
defparam \out~2 .lut_mask = 16'h00AA;
defparam \out~2 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \out~3 (
// Equation(s):
// \out~3_combout  = (\in[1]~input_o  & !\out~1_combout )

	.dataa(\in[1]~input_o ),
	.datab(gnd),
	.datac(gnd),
	.datad(\out~1_combout ),
	.cin(gnd),
	.combout(\out~3_combout ),
	.cout());
// synopsys translate_off
defparam \out~3 .lut_mask = 16'h00AA;
defparam \out~3 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \out~4 (
// Equation(s):
// \out~4_combout  = (\in[2]~input_o  & !\out~1_combout )

	.dataa(\in[2]~input_o ),
	.datab(gnd),
	.datac(gnd),
	.datad(\out~1_combout ),
	.cin(gnd),
	.combout(\out~4_combout ),
	.cout());
// synopsys translate_off
defparam \out~4 .lut_mask = 16'h00AA;
defparam \out~4 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \out~5 (
// Equation(s):
// \out~5_combout  = (\in[3]~input_o  & !\out~1_combout )

	.dataa(\in[3]~input_o ),
	.datab(gnd),
	.datac(gnd),
	.datad(\out~1_combout ),
	.cin(gnd),
	.combout(\out~5_combout ),
	.cout());
// synopsys translate_off
defparam \out~5 .lut_mask = 16'h00AA;
defparam \out~5 .sum_lutc_input = "datac";
// synopsys translate_on

assign out[0] = \out[0]~output_o ;

assign out[1] = \out[1]~output_o ;

assign out[2] = \out[2]~output_o ;

assign out[3] = \out[3]~output_o ;

assign out[4] = \out[4]~output_o ;

assign out[5] = \out[5]~output_o ;

endmodule
