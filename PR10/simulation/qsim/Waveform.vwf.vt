// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/16/2022 13:22:52"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          PR10
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PR10_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [3:0] data;
reg [3:0] instr;
reg ready;
reg reset;
// wires                                               
wire f;
wire [3:0] out_a;
wire [3:0] out_alu;
wire [3:0] out_b;
wire [2:0] out_fsm;

// assign statements (if any)                          
PR10 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.data(data),
	.f(f),
	.instr(instr),
	.out_a(out_a),
	.out_alu(out_alu),
	.out_b(out_b),
	.out_fsm(out_fsm),
	.ready(ready),
	.reset(reset)
);
initial 
begin 
#1000000 $finish;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #10000 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 
// data[ 3 ]
initial
begin
	data[3] = 1'b0;
end 
// data[ 2 ]
initial
begin
	data[2] = 1'b0;
end 
// data[ 1 ]
initial
begin
	data[1] = 1'b0;
	data[1] = #130000 1'b1;
	data[1] = #40000 1'b0;
end 
// data[ 0 ]
initial
begin
	data[0] = 1'b0;
	data[0] = #90000 1'b1;
	data[0] = #40000 1'b0;
end 
// instr[ 3 ]
initial
begin
	instr[3] = 1'b0;
	instr[3] = #170000 1'b1;
	instr[3] = #40000 1'b0;
end 
// instr[ 2 ]
initial
begin
	instr[2] = 1'b0;
end 
// instr[ 1 ]
initial
begin
	instr[1] = 1'b0;
	instr[1] = #170000 1'b1;
	instr[1] = #40000 1'b0;
end 
// instr[ 0 ]
initial
begin
	instr[0] = 1'b0;
end 

// ready
initial
begin
	ready = 1'b0;
	ready = #50000 1'b1;
	ready = #160000 1'b0;
end 
endmodule

